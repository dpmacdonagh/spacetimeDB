// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { SendPixel } from "./send_pixel_reducer.ts";
export { SendPixel };

// Import and reexport all table handle types
import { PixelTableHandle } from "./pixel_table.ts";
export { PixelTableHandle };

// Import and reexport all types
import { NewPixel } from "./new_pixel_type.ts";
export { NewPixel };
import { Pixel } from "./pixel_type.ts";
export { Pixel };

const REMOTE_MODULE = {
  tables: {
    pixel: {
      tableName: "pixel",
      rowType: Pixel.getTypeScriptAlgebraicType(),
    },
  },
  reducers: {
    send_pixel: {
      reducerName: "send_pixel",
      argsType: SendPixel.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "SendPixel", args: SendPixel }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  sendPixel(newPixel: NewPixel) {
    const __args = { newPixel };
    let __writer = new BinaryWriter(1024);
    SendPixel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_pixel", __argsBuffer, this.setCallReducerFlags.sendPixelFlags);
  }

  onSendPixel(callback: (ctx: ReducerEventContext, newPixel: NewPixel) => void) {
    this.connection.onReducer("send_pixel", callback);
  }

  removeOnSendPixel(callback: (ctx: ReducerEventContext, newPixel: NewPixel) => void) {
    this.connection.offReducer("send_pixel", callback);
  }

}

export class SetReducerFlags {
  sendPixelFlags: CallReducerFlags = 'FullUpdate';
  sendPixel(flags: CallReducerFlags) {
    this.sendPixelFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get pixel(): PixelTableHandle {
    return new PixelTableHandle(this.connection.clientCache.getOrCreateTable<Pixel>(REMOTE_MODULE.tables.pixel));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
